'use strict';angular.module('klavotools', []).directive('uiRisovalka', function() {	return {		restrict: 'E',		replace: true,		template:			'<div id="risovalka">'+				'<div class="title">Наши потоки подсознания:</div>'+				'<div ng:repeat="img in imgs">'+					'<a href="http://risovalka.zzzae.biz/gallery/{{img.id}}" /><img ng-src="{{img.url}}" /></a>'+					'<div class="author" title="{{img.author}}">{{img.author}}</div>'+				'</div>'+			'</div>',		link: function (scope, element, attrs) {		},		controller: function($scope, $http) {			$scope.imgs = [];						function getImgStruct(data) {				var e = data;				e.author = e.author ? 'Автор: ' + e.author : '';				var l_id = e.id.toLocaleLowerCase();				e.url = 'http://risovalka.zzzae.biz/g/'+l_id[0]+'/'+l_id[1]+'/'+l_id[2]+'/'+e.id+'_th.png';				return e;			}			$http.get('http://r.zzzae.biz/kts.php?KTS_REQUEST&l='+COUNT).success(function(data) {				for(var i=0; i<data.length; i++) { 					$scope.imgs.push(getImgStruct(data[i]));				}			});						$scope.abc = 'abc';		}	};})var COUNT = 3;function KTSVersion($scope) {	$scope.version = localStorage['KlavoToolsR'];}function LoadController($scope, $http) {	$http.get('./lib/opt.dat').success(function(data) {		$scope.settings = data;		var settings = JSON.parse(localStorage['settings']);				$scope.settings.style = settings.style;				for(var i=0; i<$scope.settings.scripts.length; i++) {			$scope.settings.scripts[i].enabled = settings.userjs[$scope.settings.scripts[i].id];		}		for(var i=0; i<$scope.settings.notifications.xRace.length; i++) {			$scope.settings.notifications.xRace[i].checked = settings.notifications[$scope.settings.notifications.xRace[i].value];			$scope.settings.notifications.xRace[i].disabled = (settings.notifications.timeout < 1);		}		for(var i=0; i<$scope.settings.notifications.special.length; i++) {			$scope.settings.notifications.special[i].checked = (settings.notifications[$scope.settings.notifications.special[i].value]) ? 'checked' : '';		}		for(var i=0; i<$scope.settings.notifications.xRaceTimer.length; i++) {			$scope.settings.notifications.xRaceTimer[i].checked = (settings.notifications.timeout.toString() == $scope.settings.notifications.xRaceTimer[i].value.toString()) ? 'selected' : '';				}				new function() {			var timer = null;			var rotating = false;			var battle = {				elem: null,				x: -100,				y: 280,				src: 'http://klavogonki.ru/img/bug.png',				step: 0,				finish: 205,				values: [],				rotate: null,				first: true,								push_values: function() {					this.values.push({r:null, x:  null, y:  null}); // not used					this.values.push({r:0,    x:  1,    y:  0   });					this.values.push({r:45,   x:  1,    y:  1   });					this.values.push({r:90,   x:  0,    y:  1   });					this.values.push({r:135,  x: -1,    y:  1   });					this.values.push({r:180,  x: -1,    y:  0   });					this.values.push({r:225,  x: -1,    y: -1   });					this.values.push({r:270,  x:  0,    y: -1   });					this.values.push({r:315,  x:  1,    y: -1   });				},				randomRotate: function(a) {					var random = a || Math.round(Math.random()*(this.values.length-2)+1);					rotating = true;					setTimeout(active, 1500);					this.rotate = this.values[random];					this.elem.setAttribute('style', 'position:absolute;-webkit-transform: rotate('+(this.rotate.r+45)+'deg);-webkit-transition: -webkit-transform 1300ms;');					this.setPos();				},				onclick: function() {					if(!this.first && (timer || rotating))						return;					timer = setInterval(run, 50);				},				init: function() {					this.push_values();										//create battle					this.elem = document.createElement('img');					this.elem.src = this.src;					document.body.appendChild(this.elem);					this.elem.addEventListener('click', this.onclick);										//set rotate					this.randomRotate(8);					this.setPos();										//run					this.onclick();				},								setPos: function() {					this.elem.style.top = this.y.toString() + 'px';					this.elem.style.left = this.x.toString() + 'px';				},								newPosition: function() {					this.x += this.rotate.x;					this.y += this.rotate.y;					this.step++;					if(this.step > this.finish) {						stop();						this.step = 0;						if(this.first) {							this.first = false;							this.randomRotate(2);							this.finish = 40;							return;						}																		this.randomRotate();						return;					}					this.setPos();				}			};						battle.init();						function run() {				battle.newPosition();			}						function stop() {				clearInterval(timer);				timer = null;			}			function active() {				rotating = false;			}					}			});}